{"entries":[{"timestamp":1744982408785,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":176,"length1":43,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":205,"length1":35,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"crypto.ts","value":"/**\n * SHA-256 implementation for MakeCode Arcade\n * Note: This is a simplified version optimized for the MakeCode environment  :) still works\n */\nnamespace crypto {\n    // SHA-256 Constants (first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n    const K = [\n        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n    ];\n\n    // Initial hash values (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19)\n    const H0 = [\n        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n    ];\n    function rotr(x: number, n: number): number {\n        return (x >>> n) | (x << (32 - n));\n    }\n    function ch(x: number, y: number, z: number): number {\n        return (x & y) ^ (~x & z);\n    }\n    function maj(x: number, y: number, z: number): number {\n        return (x & y) ^ (x & z) ^ (y & z);\n    }\n    function sigma0(x: number): number {\n        return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);\n    }\n    function sigma1(x: number): number {\n        return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);\n    }\n    function gamma0(x: number): number {\n        return rotr(x, 7) ^ rotr(x, 18) ^ (x >>> 3);\n    }\n    function gamma1(x: number): number {\n        return rotr(x, 17) ^ rotr(x, 19) ^ (x >>> 10);\n    }\n\n    function stringToBytes(str: string): number[] {\n        const bytes = [];\n        for (let i = 0; i < str.length; i++) {\n            bytes.push(str.charCodeAt(i));\n        }\n        return bytes;\n    }\n\n    function longToBytes(value: number): number[] {\n        return [\n            (value >>> 24) & 0xFF,\n            (value >>> 16) & 0xFF,\n            (value >>> 8) & 0xFF,\n            value & 0xFF\n        ];\n    }\n\n    function padMessage(bytes: number[]): number[] {\n        const len = bytes.length;\n        const k = (512 + 448 - ((len * 8 + 1) % 512)) % 512;\n        const padding = [];\n        padding.push(0x80);\n        for (let i = 0; i < (k - 7) / 8; i++) {\n            padding.push(0);\n        }\n        const lenBits = len * 8;\n        for (let i = 0; i < 8; i++) {\n            padding.push(0);\n        }\n        padding[padding.length - 4] = (lenBits >>> 24) & 0xFF;\n        padding[padding.length - 3] = (lenBits >>> 16) & 0xFF;\n        padding[padding.length - 2] = (lenBits >>> 8) & 0xFF;\n        padding[padding.length - 1] = lenBits & 0xFF;\n\n        return bytes.concat(padding);\n    }\n    function processBlock(block: number[], H: number[]): void {\n        const W = [];\n        for (let t = 0; t < 16; t++) {\n            W[t] = (block[t * 4] << 24) | (block[t * 4 + 1] << 16) | (block[t * 4 + 2] << 8) | block[t * 4 + 3];\n        }\n        for (let t = 16; t < 64; t++) {\n            W[t] = (gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16]) >>> 0;\n        }\n        let a = H[0];\n        let b = H[1];\n        let c = H[2];\n        let d = H[3];\n        let e = H[4];\n        let f = H[5];\n        let g = H[6];\n        let h = H[7];\n        for (let t = 0; t < 64; t++) {\n            const T1 = (h + sigma1(e) + ch(e, f, g) + K[t] + W[t]) >>> 0;\n            const T2 = (sigma0(a) + maj(a, b, c)) >>> 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) >>> 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) >>> 0;\n        }\n        H[0] = (H[0] + a) >>> 0;\n        H[1] = (H[1] + b) >>> 0;\n        H[2] = (H[2] + c) >>> 0;\n        H[3] = (H[3] + d) >>> 0;\n        H[4] = (H[4] + e) >>> 0;\n        H[5] = (H[5] + f) >>> 0;\n        H[6] = (H[6] + g) >>> 0;\n        H[7] = (H[7] + h) >>> 0;\n    }\n    /**\n     * Hashes a string\n     * @param message - The input you want to hash\n     * @returns - Hashed message\n     */\n    //% block\n    export function sha256(message: string): string {\n        const bytes = stringToBytes(message);\n        const paddedBytes = padMessage(bytes);\n        const H = H0.slice();\n        for (let i = 0; i < paddedBytes.length; i += 64) {\n            const block = paddedBytes.slice(i, i + 64);\n            processBlock(block, H);\n        }\n        let result = \"\";\n        for (let i = 0; i < 8; i++) {\n            let hex = \"\";\n            let temp = H[i];\n            for (let j = 0; j < 8; j++) {\n                const digit = temp & 0xF;\n                hex = \"0123456789abcdef\".charAt(digit) + hex;\n                temp = temp >>> 4;\n            }\n            result += hex;\n        }\n        return result;\n    }\n}\n"}]},{"timestamp":1744982923467,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":157,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":226,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1744982408784,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"crypto\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1744983104072}